apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: nightly-snapshot-generator
  labels:
    build.appstudio.redhat.com/pipeline: "nightly-snapshot-generator"
spec:
  params:
    - name: PATTERN
      type: string
      default: "scheduled"
    - name: QUAY_SECRET
      type: string
      default: "scheduled"
    - name: QUAY_SECRET_KEY
      type: string
      default: "scheduled"
    - name: GITHUB_SECRET
      type: string
      default: "scheduled"
    - name: GITHUB_SECRET_KEY
      type: string
      default: "scheduled"
  results:
    - name: COMPARE_RESULT
      value: "$(tasks.compare.results.COMPARE_RESULT)"
    - name: SNAPSHOT_RESULT
      value: "$(tasks.snapshot.results.SNAPSHOT_RESULT)"
  tasks:
    - name: compare
      params:
        - name: PATTERN
          value: "$(params.PATTERN)"
      taskSpec:
        description: check to see if pipelinerun has PATTERN in it
        params:
          - name: PATTERN
            type: string
            description: pattern to match source-pipelinerun
        results:
          - name: COMPARE_RESULT
        steps:
          - name: compare
            image: registry.access.redhat.com/ubi8/ubi-minimal
            env:
              - name: PATTERN
                value: "$(params.PATTERN)"
              - name: SOURCE_PIPELINERUN
                valueFrom:
                  fieldRef:
                    fieldPath: metadata.labels['pac.test.appstudio.openshift.io/original-prname']
            script: |
              #!/usr/bin/env bash
              echo "comparing '$SOURCE_PIPELINERUN' against pattern '$PATTERN'"
              matches=$(echo "$SOURCE_PIPELINERUN" | grep "$PATTERN")
              if [ -n "$matches" ]; then
                echo "true" > $(results.COMPARE_RESULT.path)
              else
                echo "false" > $(results.COMPARE_RESULT.path)
              fi
    - name: snapshot
      params:
        - name: QUAY_SECRET
          value: "$(params.QUAY_SECRET)"
        - name: QUAY_SECRET_KEY
          value: "$(params.QUAY_SECRET_KEY)"
        - name: GITHUB_SECRET
          value: "$(params.GITHUB_SECRET)"
        - name: GITHUB_SECRET_KEY
          value: "$(params.GITHUB_SECRET_KEY)"
      taskSpec:
        description: generate a snapshot of the most recent nightly build
        params:
          - name: QUAY_SECRET
            type: string
          - name: QUAY_SECRET_KEY
            type: string
          - name: GITHUB_SECRET
            type: string
          - name: GITHUB_SECRET_KEY
            type: string
        results:
          - name: SNAPSHOT_RESULT
        steps:
          - name: get-repo
            image: registry.access.redhat.com/ubi8/ubi-minimal
            env:
              - name: QUAY_SECRET
                value: "$(params.QUAY_SECRET)"
              - name: QUAY_SECRET_KEY
                value: "$(params.QUAY_SECRET_KEY)"
              - name: GITHUB_SECRET
                value: "$(params.GITHUB_SECRET)"
              - name: GITHUB_SECRET_KEY
                value: "$(params.GITHUB_SECRET_KEY)"
              - name: APPLICATION
                valueFrom:
                  fieldRef:
                    fieldPath: metadata.labels['appstudio.openshift.io/application']
            script: |
              #!/usr/bin/env bash
              microdnf install git python3.12
              eval $(ssh-agent)
              ssh-add /secret/path
              ssh-keyscan github.com >> ~/.ssh/known_hosts
              mkdir src && cd src
              git remote add origin git@github.com:red-hat-data-services/rhods-devops-infra.git
              git config core.sparseCheckout true
              echo tools/snapshot-generator > .git/info/sparse-checkout
              cd tools/snapshot-generator
              python3 -m venv venv
              source venv/bin/activate
              pip install -r requirements.txt 
              bash generate-nightly-override-snapshot.sh
              echo "test" > $(results.SNAPSHOT_RESULT.path)
  
              
    #- name: publish
    #  params:
    #    - name: K8S_TOKEN
    #      value: "($params.K8S_TOKEN)"
